name: Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths: 
      - 'infrastructure/**'
      - 'helm-charts/**'
      - 'argocd/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'infrastructure/**'
      - 'helm-charts/**'
      - 'argocd/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Terraform Format Check
      run: |
        cd infrastructure/terraform
        terraform fmt -check -recursive
    
    - name: Terraform Validate Dev
      run: |
        cd infrastructure/terraform/environments/dev
        terraform init -backend=false
        terraform validate
    
    - name: Terraform Validate Prod
      run: |
        cd infrastructure/terraform/environments/prod
        terraform init -backend=false
        terraform validate

  helm-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Lint Helm Charts
      run: |
        for chart in helm-charts/*/; do
          if [ -f "$chart/Chart.yaml" ]; then
            echo "Linting $chart"
            helm lint "$chart"
            helm template test "$chart" --dry-run
          fi
        done

  security-scan:
    runs-on: ubuntu-latest
    needs: [terraform-validate, helm-lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Checkov security scan
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: infrastructure/terraform
        framework: terraform
        output_format: cli,sarif
        output_file_path: reports/checkov-results.sarif
    
    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/checkov-results.sarif

  terraform-plan-dev:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    needs: [terraform-validate, security-scan]
    environment: dev
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Init Dev
      run: |
        cd infrastructure/terraform/environments/dev
        terraform init
    
    - name: Terraform Plan Dev
      run: |
        cd infrastructure/terraform/environments/dev
        terraform plan -out=tfplan
    
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-dev
        path: infrastructure/terraform/environments/dev/tfplan

  terraform-apply-dev:
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'dev' && 
       github.event.inputs.action == 'apply')
    needs: terraform-plan-dev
    environment: dev
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan-dev
        path: infrastructure/terraform/environments/dev/
    
    - name: Terraform Init Dev
      run: |
        cd infrastructure/terraform/environments/dev
        terraform init
    
    - name: Terraform Apply Dev
      run: |
        cd infrastructure/terraform/environments/dev
        terraform apply tfplan

  deploy-argocd-apps:
    runs-on: ubuntu-latest
    needs: terraform-apply-dev
    if: success()
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group aiapp-dev-rg --name aiapp-dev-aks
    
    - name: Install ArgoCD
      run: |
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    
    - name: Wait for ArgoCD
      run: |
        kubectl wait --for=condition=Ready pods --all -n argocd --timeout=300s
    
    - name: Deploy ArgoCD Applications
      run: |
        kubectl apply -f argocd/projects/
        kubectl apply -f argocd/applications/dev/
    
    - name: Get ArgoCD Admin Password
      run: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
        echo "ArgoCD URL: kubectl port-forward svc/argocd-server -n argocd 8080:443"

  notify-teams:
    runs-on: ubuntu-latest
    needs: [deploy-argocd-apps]
    if: always()
    steps:
    - name: Notify Teams on Success
      if: needs.deploy-argocd-apps.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Infrastructure deployment to DEV completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Teams on Failure
      if: needs.deploy-argocd-apps.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Infrastructure deployment to DEV failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}